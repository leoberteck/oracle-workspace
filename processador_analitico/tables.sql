------------------------------------------------------------------------------------------------------------------------
----------------------------------------------TABELAS DO KIJO 33 E AUXILIARES-------------------------------------------
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE CLIENTE (
  CD_ID NUMBER PRIMARY KEY,
  OWNER VARCHAR2(30)
);
/
CREATE SEQUENCE SEQ_CLIENTE START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_CLIENTE
  BEFORE INSERT ON CLIENTE
  FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :new.CD_ID := SEQ_CLIENTE.nextval;
  END IF;
END;
/
CREATE TABLE TMP_MAPA_VAR_BATCH (
	CD_ID NUMBER NOT NULL,
  CD_CLIENTE NUMBER NOT NULL REFERENCES CLIENTE(CD_ID),
	STATUS VARCHAR2(50) DEFAULT 'OPEN' NOT NULL CHECK(STATUS IN ('OPEN', 'FULL', 'IN_PROCESS', 'ERROR')),
  DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP,
	CONSTRAINT TMP_MAPA_VAR_BATCH_PK PRIMARY KEY (CD_ID, CD_CLIENTE)
);
/
CREATE OR REPLACE TRIGGER TRG_BU_MAPA_VAR_BATCH
  BEFORE UPDATE ON TMP_MAPA_VAR_BATCH
  FOR EACH ROW
BEGIN
  :new.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE INDEX IDX_FK_CLIENTE ON TMP_MAPA_VAR_BATCH (CD_CLIENTE);
/
CREATE SEQUENCE SEQ_MAPA_VAR_BATCH START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_TMP_MAPA_VAR_BATCH
	BEFORE INSERT ON TMP_MAPA_VAR_BATCH
	FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
	  :new.CD_ID := SEQ_MAPA_VAR_BATCH.nextval;
	END IF;
END;
/
CREATE TABLE TMP_MAPA_VAR
(
  CD_ID                          NUMBER                         NOT NULL PRIMARY KEY,
  CD_CLIENTE                     NUMBER                         NOT NULL,
  BATCH_ID                       NUMBER,
  DT_CREATED                     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  ORIGIN_ROWID                   ROWID                          NOT NULL,
  CD_MAPA_VAR                    NUMBER                         NOT NULL,
  CD_EQUIPAMENTO                 VARCHAR2(15)                   not null,
  DESC_EQUIPAMENTO               VARCHAR2(50),
  FG_TP_EQUIPAMENTO              NUMBER(11)                     not null,
  FG_FRENTE_TRABALHO             NUMBER(1),
  CD_EQUIPE                      NUMBER(11),
  DT_HR_UTC_INICIAL              DATE                           not null,
  DT_HR_LOCAL_INICIAL            DATE,
  VL_LATITUDE_INICIAL            NUMBER(23, 15),
  VL_LONGITUDE_INICIAL           NUMBER(23, 15),
  CD_FAZENDA_INICIAL             VARCHAR2(10),
  CD_ZONA_INICIAL                VARCHAR2(10),
  CD_TALHAO_INICIAL              VARCHAR2(10),
  VL_TEMPO_SEGUNDOS              NUMBER(20),
  DT_HR_UTC_FINAL                DATE,
  DT_HR_LOCAL_FINAL              DATE,
  VL_LATITUDE_FINAL              NUMBER(23, 15),
  VL_LONGITUDE_FINAL             NUMBER(23, 15),
  CD_FAZENDA_FINAL               VARCHAR2(10),
  CD_ZONA_FINAL                  VARCHAR2(10),
  CD_TALHAO_FINAL                VARCHAR2(10),
  VL_DISTANCIA_METROS            NUMBER(11, 5),
  CD_OPERACAO                    NUMBER(11),
  DESC_OPERACAO                  VARCHAR2(50),
  VL_VELOCIDADE                  NUMBER(11, 5),
  CD_OPERADOR                    NUMBER(11),
  DESC_OPERADOR                  VARCHAR2(50),
  CD_ESTADO                      VARCHAR2(5),
  QT_SECAO_PULVERIZADOR_ANTERIOR NUMBER(10),
  CD_IMPLEMENTO                  VARCHAR2(15),
  VL_VELOCIDADE_VENTO            NUMBER(11, 5),
  VL_TEMPERATURA                 NUMBER(11, 5),
  VL_UMIDADE                     NUMBER(11, 5),
  VL_CONSUMO_INSTANTANEO         NUMBER(11, 5),
  VL_RPM                         NUMBER(11, 5),
  VL_TEMPERATURA_MOTOR           NUMBER(11, 5),
  VL_ORDEM_SERVICO               NUMBER,
  VL_ALARME                      VARCHAR2(50),
  VL_ALERTA_CLIMA                VARCHAR2(50),
  VL_ALARME_CLIMA                VARCHAR2(50),
  QT_SECAO_PULVERIZADOR          VARCHAR2(60),
  VL_HECTARES_HORA               NUMBER(23, 15),
  VL_AREA_HEC_INTERSEC_TALHAOINI NUMBER(23, 15),
  VL_AREA_HEC_INTERSEC_TALHAOFIM NUMBER(23, 15),
  CD_OPERAC_PARADA               NUMBER(11),
  DESC_OPERAC_PARADA             VARCHAR2(50),
  CD_UNIDADE                     NUMBER(11),
  VL_HORIMETRO_INICIAL           NUMBER(11, 3),
  VL_HORIMETRO_FINAL             NUMBER(11, 3),
  VL_LARGURA_IMPLEMENTO          NUMBER(10, 2),
  CD_JORNADA                     NUMBER(10),
  CD_ID_DETALHESOP               NUMBER,
  CD_OPERACAO_CB                 NUMBER(11),
  CD_TIPO_BICO                   NUMBER(11),
  DESC_TIPO_BICO                 VARCHAR2(100),
  VL_RENDIMENTO_COLHEITA         NUMBER(23, 15),
  VL_UMIDADE_GRAOS               NUMBER(23, 15),
  VL_HECTARES_HORA_M             NUMBER(23, 15),
  VL_AREAHEC_INTERSECTALHAOINI_M NUMBER(23, 15),
  VL_AREAHEC_INTERSECTALHAOFIM_M NUMBER(23, 15),
  VL_PONTO_ORVALHO               NUMBER(11, 5),
  VL_PARTICULAS_OLEO             VARCHAR2(100),
  VL_RENDIMENTO_COLHEITA_M       NUMBER(23, 15),
  VL_UMIDADE_GRAOS_M             NUMBER(23, 15),
  VL_VAZAO_LITROS_HA             NUMBER(23, 15),
  VL_VAZAO_LITROS_MIN            NUMBER(23, 15),
  VL_VAZAO_LITROS_HA_M           NUMBER(23, 15),
  VL_VAZAO_LITROS_MIN_M          NUMBER(23, 15),
  VL_DOSAGEM_TAXA1               NUMBER(11),
  VL_DOSAGEM_TAXA2               NUMBER(11),
  VL_DOSAGEM_TAXA3               NUMBER(11),
  VL_PRESSAO_BOMBA               NUMBER(23, 15),
  VL_PRESSAO_BOMBA_M             NUMBER(23, 15),
  CONSTRAINT TMP_MAPA_VAR_FK FOREIGN KEY (BATCH_ID, CD_CLIENTE) REFERENCES TMP_MAPA_VAR_BATCH (CD_ID, CD_CLIENTE) ON DELETE CASCADE
);
CREATE SEQUENCE SEQ_TMP_MAPA_VAR_ID START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_TMP_MAPA_VAR
  BEFORE INSERT ON TMP_MAPA_VAR
  FOR EACH ROW
BEGIN
  :NEW.CD_ID := SEQ_TMP_MAPA_VAR_ID.nextval;
END;
/
CREATE INDEX IDX_TMP_MAPA_VAR_BATCH on TMP_MAPA_VAR (CD_CLIENTE, BATCH_ID);
/
CREATE INDEX IDX_TMP_MAPA_VAR_BATCH_CD_MP_VAR on TMP_MAPA_VAR (CD_CLIENTE, BATCH_ID, CD_MAPA_VAR);
/
CREATE INDEX IDX_TMP_MAPA_VAR_BATCH_ROWID on TMP_MAPA_VAR (CD_CLIENTE, BATCH_ID, ORIGIN_ROWID);
/
CREATE INDEX IDX_TMP_MAPA_VAR_SEARCH on TMP_MAPA_VAR (CD_CLIENTE, DT_HR_UTC_INICIAL, DT_HR_UTC_FINAL, CD_OPERACAO, CD_EQUIPAMENTO, CD_MAPA_VAR);
/
CREATE TABLE EVENTOS_OPERACAO_TALHAO (
  CD_ID NUMBER NOT NULL PRIMARY KEY
  , CD_CLIENTE NUMBER NOT NULL REFERENCES CLIENTE(CD_ID)
  , CD_TALHAO NUMBER NOT NULL REFERENCES GEO_LAYER_TALHAO(CD_ID)
  , CD_OPERACAO NUMBER NOT NULL
  , DT_INICIO DATE NOT NULL
  , DT_FIM DATE NOT NULL
  , STATUS VARCHAR2(10) DEFAULT 'UPTODATE' NOT NULL CHECK ( STATUS IN ('UPTODATE', 'IN_PROCESS', 'CHANGED') )
  , DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
  , DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
  , CONSTRAINT EOT_UNIQ_IDX UNIQUE (CD_CLIENTE, CD_TALHAO, CD_OPERACAO, DT_INICIO, DT_FIM)
    USING INDEX (CREATE INDEX IDX_EOT_SEARCH ON EVENTOS_OPERACAO_TALHAO (CD_CLIENTE, CD_TALHAO, CD_OPERACAO, DT_INICIO, DT_FIM))
);
/
CREATE SEQUENCE SEQ_EVENTOS_OPERACAO_TALHAO START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_EVENTOS_OPERACAO_TALHAO
  BEFORE INSERT ON EVENTOS_OPERACAO_TALHAO
  FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_EVENTOS_OPERACAO_TALHAO.nextval;
  END IF;
END;
/
CREATE OR REPLACE TRIGGER TRG_BU_EVENTOS_OPERACAO_TALHAO
  BEFORE UPDATE ON EVENTOS_OPERACAO_TALHAO
  FOR EACH ROW
BEGIN
  :new.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE TABLE GEO_LAYER_OPERACAO_TALHAO
(
  CD_ID                          NUMBER                           NOT NULL PRIMARY KEY,

  CD_CLIENTE                     NUMBER                           NOT NULL REFERENCES CLIENTE (CD_ID),
  CD_TALHAO                      NUMBER                                    REFERENCES GEO_LAYER_TALHAO(CD_ID),
  CD_EVENTO                      NUMBER                                    REFERENCES EVENTOS_OPERACAO_TALHAO(CD_ID),
  DT_HR_UTC_INICIAL              DATE                             NOT NULL,
  DT_HR_UTC_FINAL                DATE                             NOT NULL,
  CD_OPERAC_PARADA               NUMBER(11) DEFAULT ON NULL 0     NOT NULL,
  CD_JORNADA                     NUMBER(10) DEFAULT ON NULL 0     NOT NULL,
  FG_TP_EQUIPAMENTO              NUMBER(11) DEFAULT ON NULL 0     NOT NULL,
  CD_EQUIPAMENTO                 VARCHAR2(15) DEFAULT ON NULL '0' NOT NULL,
  CD_IMPLEMENTO                  VARCHAR2(15) DEFAULT ON NULL '0' NOT NULL,
  CD_EQUIPE                      NUMBER(11) DEFAULT ON NULL 0     NOT NULL,
  CD_OPERADOR                    NUMBER(11) DEFAULT ON NULL 0     NOT NULL,
  CD_ESTADO                      VARCHAR2(5) DEFAULT ON NULL '0'  NOT NULL,
  CD_OPERACAO                    NUMBER(11) DEFAULT ON NULL 0     NOT NULL,
  CD_OPERACAO_CB                 NUMBER(11),

  ORIGIN_ROWID                   ROWID                            NOT NULL,
  CD_MAPA_VAR                    NUMBER                           NOT NULL,
  DESC_OPERACAO                  VARCHAR2(50),
  DESC_EQUIPAMENTO               VARCHAR2(50),
  DESC_OPERADOR                  VARCHAR2(50),
  DESC_TIPO_BICO                 VARCHAR2(100),
  DESC_OPERAC_PARADA             VARCHAR2(50),
  FG_FRENTE_TRABALHO             NUMBER(1),
  QT_SECAO_PULVERIZADOR          VARCHAR2(60),
  QT_SECAO_PULVERIZADOR_ANTERIOR NUMBER(10),
  CD_ID_DETALHESOP               NUMBER(*),
  CD_TIPO_BICO                   NUMBER(11),
  VL_TEMPO_SEGUNDOS              NUMBER(20),
  VL_AREA                        NUMBER(11, 5),
  VL_DISTANCIA_METROS            NUMBER(11, 5),
  VL_VELOCIDADE                  NUMBER(11, 5),
  VL_VELOCIDADE_VENTO            NUMBER(11, 5),
  VL_TEMPERATURA                 NUMBER(11, 5),
  VL_UMIDADE                     NUMBER(11, 5),
  VL_CONSUMO_INSTANTANEO         NUMBER(11, 5),
  VL_RPM                         NUMBER(11, 5),
  VL_TEMPERATURA_MOTOR           NUMBER(11, 5),
  VL_ORDEM_SERVICO               NUMBER(*),
  VL_ALARME                      VARCHAR2(50),
  VL_ALERTA_CLIMA                VARCHAR2(50),
  VL_ALARME_CLIMA                VARCHAR2(50),
  VL_HECTARES_HORA               NUMBER(23, 15),
  VL_HORIMETRO_INICIAL           NUMBER(11, 3),
  VL_HORIMETRO_FINAL             NUMBER(11, 3),
  VL_LARGURA_IMPLEMENTO          NUMBER(10, 2),
  VL_RENDIMENTO_COLHEITA         NUMBER(23, 15),
  VL_UMIDADE_GRAOS               NUMBER(23, 15),
  VL_HECTARES_HORA_M             NUMBER(23, 15),
  VL_PONTO_ORVALHO               NUMBER(11, 5),
  VL_PARTICULAS_OLEO             VARCHAR2(100),
  VL_RENDIMENTO_COLHEITA_M       NUMBER(23, 15),
  VL_UMIDADE_GRAOS_M             NUMBER(23, 15),
  VL_VAZAO_LITROS_HA             NUMBER(23, 15),
  VL_VAZAO_LITROS_MIN            NUMBER(23, 15),
  VL_VAZAO_LITROS_HA_M           NUMBER(23, 15),
  VL_VAZAO_LITROS_MIN_M          NUMBER(23, 15),
  VL_DOSAGEM_TAXA1               NUMBER(11),
  VL_DOSAGEM_TAXA2               NUMBER(11),
  VL_DOSAGEM_TAXA3               NUMBER(11),
  VL_PRESSAO_BOMBA               NUMBER(23, 15),
  VL_PRESSAO_BOMBA_M             NUMBER(23, 15),
  DT_CREATED                     TIMESTAMP    DEFAULT SYSTIMESTAMP,
  DT_UPDATED                     TIMESTAMP    DEFAULT SYSTIMESTAMP,
  LINHA                          MDSYS.SDO_GEOMETRY,
  GEOMETRIA                      MDSYS.SDO_GEOMETRY,
  CONSTRAINT CONSTRAINT_GLOT_UNIQ UNIQUE ( CD_CLIENTE
    , CD_TALHAO
    , DT_HR_UTC_INICIAL
    , DT_HR_UTC_FINAL
    , CD_OPERACAO
    , CD_OPERAC_PARADA
    , CD_JORNADA
    , FG_TP_EQUIPAMENTO
    , CD_EQUIPAMENTO
    , CD_IMPLEMENTO
    , CD_EQUIPE
    , CD_OPERADOR
    , CD_ESTADO
  ) USING INDEX (
    CREATE INDEX IDX_GLOT_UNIQ ON GEO_LAYER_OPERACAO_TALHAO( CD_CLIENTE
    , CD_TALHAO
    , DT_HR_UTC_INICIAL
    , DT_HR_UTC_FINAL
    , CD_OPERACAO
    , CD_OPERAC_PARADA
    , CD_JORNADA
    , FG_TP_EQUIPAMENTO
    , CD_EQUIPAMENTO
    , CD_IMPLEMENTO
    , CD_EQUIPE
    , CD_OPERADOR
    , CD_ESTADO)
  )
);
CREATE SEQUENCE SEQ_GEO_OPERC_TL_ID START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_GEO_OPERC_TL
  BEFORE INSERT ON GEO_LAYER_OPERACAO_TALHAO
  FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_GEO_OPERC_TL_ID.nextval;
  END IF;
END;
/
CREATE INDEX IDX_GEO_OPERC_TL_CLIENTE ON GEO_LAYER_OPERACAO_TALHAO (CD_CLIENTE);
/
CREATE INDEX IDX_GEO_OPERC_TL_TALHAO ON GEO_LAYER_OPERACAO_TALHAO (CD_TALHAO);
/
CREATE INDEX IDX_GEO_OPERC_TL_ORGROWID ON GEO_LAYER_OPERACAO_TALHAO (ORIGIN_ROWID);
/
CREATE INDEX IDX_GEO_OPERC_TL_AUDIT ON GEO_LAYER_OPERACAO_TALHAO(DT_CREATED, DT_UPDATED);
/
CREATE INDEX IDX_GEO_OPERC_TL_SEARCH ON GEO_LAYER_OPERACAO_TALHAO (CD_CLIENTE, DT_HR_UTC_INICIAL, DT_HR_UTC_FINAL, CD_OPERACAO, CD_EQUIPAMENTO, CD_MAPA_VAR);
/
CALL MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(
    OWNER => USER
    , TABLE_NAME => 'GEO_LAYER_OPERACAO_TALHAO'
    , COLUMN_NAME => 'LINHA'
    , DIMINFO => mdsys.SDO_DIM_ARRAY(
         mdsys.SDO_DIM_ELEMENT('X', -180, 180, 0.05),
         mdsys.SDO_DIM_ELEMENT('Y', -90 , 90 , 0.05)
      )
    , SRID => 4326);
/
CALL MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(
    OWNER => USER
    , TABLE_NAME => 'GEO_LAYER_OPERACAO_TALHAO'
    , COLUMN_NAME => 'GEOMETRIA'
    , DIMINFO => mdsys.SDO_DIM_ARRAY(
         mdsys.SDO_DIM_ELEMENT('X', -180, 180, 0.05),
         mdsys.SDO_DIM_ELEMENT('Y', -90 , 90 , 0.05)
      )
    , SRID => 4326);
/
CREATE INDEX IDX_GEO_OPERC_TL_LINHA ON GEO_LAYER_OPERACAO_TALHAO (LINHA) INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2;
/
CREATE INDEX IDX_GEO_OPERC_GEOMETRIA ON GEO_LAYER_OPERACAO_TALHAO (GEOMETRIA) INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2;
/
CREATE OR REPLACE TRIGGER TRG_BU_GEO_LAYER_OP_TALHAO
  BEFORE INSERT ON GEO_LAYER_OPERACAO_TALHAO
  FOR EACH ROW
BEGIN
  :new.DT_UPDATED := SYSTIMESTAMP;
END;
/
------------------------------------------------------------------------------------------------------------------------
-------------------------------------------TABELAS DE CONTROLE DE EXECUCAO----------------------------------------------
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE PROCEDURE_SEMAFORO (
  PROC_NAME VARCHAR2(200) PRIMARY KEY,
  MAX_CONCURRENT_INSTANCES NUMBER DEFAULT 9999 CHECK (MAX_CONCURRENT_INSTANCES > 0),
  BLOCK_NEW_INSTANCES NUMBER DEFAULT 0 CHECK (BLOCK_NEW_INSTANCES IN (0,1)),
  DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP
);
/
CREATE OR REPLACE TRIGGER TRG_BU_PROCEDURE_SEMAFORO
  BEFORE UPDATE ON PROCEDURE_SEMAFORO
  FOR EACH ROW
BEGIN
  :NEW.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE TABLE PROCEDURE_EXECUCAO (
  CD_ID NUMBER NOT NULL PRIMARY KEY,
  PROC_NAME VARCHAR2(200) REFERENCES PROCEDURE_SEMAFORO(PROC_NAME),
  ARGS VARCHAR2(4000) CHECK (ARGS IS JSON),
  RUNNING NUMBER(1) DEFAULT 0 CHECK (RUNNING IN (0,1)),
  HAS_ERROS NUMBER(1) DEFAULT 0 CHECK (HAS_ERROS IN (0,1)),
  DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP
);
/
CREATE INDEX IDX_SEMAFORO_PROC_EXECUCAO ON PROCEDURE_EXECUCAO(PROC_NAME, DT_CREATED, RUNNING, HAS_ERROS);
/
CREATE SEQUENCE SEQ_SEMAFORO_PROC_EXECUCAO START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_SEMAFORO_PROC_EXECUCAO
  BEFORE INSERT ON PROCEDURE_EXECUCAO
  FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_SEMAFORO_PROC_EXECUCAO.nextval;
  END IF;
END;
/
CREATE OR REPLACE TRIGGER TRG_BU_SEMAFORO_PROC_EXECUCAO
  BEFORE UPDATE ON PROCEDURE_EXECUCAO
  FOR EACH ROW
BEGIN
  :NEW.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE OR REPLACE VIEW VW_SEMAFORO_STATUS AS (
  SELECT ps.PROC_NAME, ps.BLOCK_NEW_INSTANCES, ps.MAX_CONCURRENT_INSTANCES, COUNT(1) INSTANCES_RUNNING FROM PROCEDURE_SEMAFORO ps
  JOIN PROCEDURE_EXECUCAO pe ON ps.PROC_NAME = pe.PROC_NAME AND pe.RUNNING = 1
  GROUP BY ps.PROC_NAME, MAX_CONCURRENT_INSTANCES, BLOCK_NEW_INSTANCES
);
/
CREATE TABLE LOG_LEVEL(
  CD_ID NUMBER NOT NULL PRIMARY KEY,
  NAME VARCHAR2(30)
);
INSERT ALL
  INTO LOG_LEVEL (CD_ID, NAME) VALUES (0, 'FATAL')
  INTO LOG_LEVEL (CD_ID, NAME) VALUES (1, 'ERROR')
  INTO LOG_LEVEL (CD_ID, NAME) VALUES (2, 'WARNING')
  INTO LOG_LEVEL (CD_ID, NAME) VALUES (3, 'INFO')
  INTO LOG_LEVEL (CD_ID, NAME) VALUES (4, 'DEBUG')
SELECT 1 FROM DUAL;
COMMIT;
/
CREATE TABLE LOG_PROC_EXECUCAO (
  CD_SEMAFORO NUMBER REFERENCES PROCEDURE_EXECUCAO(CD_ID) ON DELETE CASCADE,
  DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  LOG_LEVEL NUMBER REFERENCES LOG_LEVEL (CD_ID),
  SQLCODE NUMBER,
  SQLERRM VARCHAR2(500),
  DETAILS CLOB,
  CONSTRAINT LOG_PROC_EXECUCAO_PK PRIMARY KEY (CD_SEMAFORO, LOG_LEVEL, DT_CREATED)
);
/
CREATE INDEX IDX_LOG_PROC_SEMAFORO ON LOG_PROC_EXECUCAO(CD_SEMAFORO);
/
CREATE INDEX IDX_LOG_PROC_LEVEL ON LOG_PROC_EXECUCAO(LOG_LEVEL);
/
CREATE OR REPLACE TYPE LOGGER AS OBJECT (
  v_semaforo_id NUMBER,
  v_source_name VARCHAR2(128),
  v_source_type VARCHAR2(12),
  v_proc_name   VARCHAR2(128),
  v_proc_args   VARCHAR2(4000),

  member function fnc_canRun return number,
  member procedure fnc_blockNewInstances,
  member procedure fnc_unBlockNewInstances,

  member procedure log_with_stack_trace(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT '', log_level NUMBER DEFAULT 0),
  member procedure fatal(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT ''),
  member procedure error(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT ''),
  member procedure warning(message CLOB),
  member procedure info(message CLOB),
  member procedure debug(message CLOB),
  member procedure endRun
);
/
CREATE OR REPLACE TYPE BODY LOGGER AS
  member function fnc_canRun return number is
    v_can_run NUMBER;
  begin
    SELECT
      CASE
        WHEN BLOCK_NEW_INSTANCES = 1 OR INSTANCES_RUNNING > MAX_CONCURRENT_INSTANCES THEN 0
        ELSE 1 END INTO v_can_run
    FROM VW_SEMAFORO_STATUS WHERE PROC_NAME = v_proc_name;
    return v_can_run;
  end fnc_canRun;

  member procedure fnc_blockNewInstances is
  begin
    UPDATE PROCEDURE_SEMAFORO SET BLOCK_NEW_INSTANCES = 1 WHERE PROC_NAME = v_proc_name;
    COMMIT;
  end fnc_blockNewInstances;

  member procedure fnc_unBlockNewInstances is
  begin
    UPDATE PROCEDURE_SEMAFORO SET BLOCK_NEW_INSTANCES = 0 WHERE PROC_NAME = v_proc_name;
    COMMIT;
  end fnc_unBlockNewInstances;

  member procedure log_with_stack_trace(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT '', log_level NUMBER DEFAULT 0) is
    the_message CLOB;
    v_line NUMBER;
  begin
    SELECT TO_NUMBER(REGEXP_SUBSTR(
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE()
      , 'line.(\d+)'
      , 1, 1, NULL, 1
    )) into v_line FROM DUAL
    FETCH FIRST 1 ROWS ONLY;

    SELECT LISTAGG(LINE_TEXT, '\n') into the_message FROM (
      SELECT CASE LINE
        WHEN v_line THEN '=======> ' || LINE ||  ' | ' || TEXT
        ELSE LINE ||  ' | ' || TEXT END LINE_TEXT
      FROM SYS.USER_SOURCE
      WHERE NAME = v_source_name
        AND SYS.USER_SOURCE.TYPE = v_source_type
        AND LINE BETWEEN (v_line - 10) AND (v_line + 10)
      ORDER BY LINE
    );
    the_message := message || (chr(10)) || the_message;
    INSERT INTO LOG_PROC_EXECUCAO(CD_SEMAFORO, LOG_LEVEL, SQLCODE, SQLERRM, DETAILS) VALUES (v_semaforo_id, log_level, p_sqlCode, p_sqlErrM, the_message);
  end;
  member procedure fatal(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT '') is
  begin
    log_with_stack_trace(p_sqlCode, p_sqlErrM, message, 0);
    UPDATE PROCEDURE_EXECUCAO SET HAS_ERROS = 1 WHERE CD_ID = v_semaforo_id;
  end;
  member procedure error(p_sqlCode NUMBER, p_sqlErrM VARCHAR2, message CLOB DEFAULT '') is
  begin
    log_with_stack_trace(p_sqlCode, p_sqlErrM, message, 1);
    UPDATE PROCEDURE_EXECUCAO SET HAS_ERROS = 1 WHERE CD_ID = v_semaforo_id;
  end;
  member procedure warning(message CLOB) is
  begin
    INSERT INTO LOG_PROC_EXECUCAO(CD_SEMAFORO, LOG_LEVEL, DETAILS) VALUES (v_semaforo_id, 2, message);
  end;
  member procedure info(message CLOB) is
  begin
    INSERT INTO LOG_PROC_EXECUCAO(CD_SEMAFORO, LOG_LEVEL, DETAILS) VALUES (v_semaforo_id, 3, message);
  end;
  member procedure debug(message CLOB) is
  begin
    INSERT INTO LOG_PROC_EXECUCAO(CD_SEMAFORO, LOG_LEVEL, DETAILS) VALUES (v_semaforo_id, 4, message);
  end;
  member procedure endRun is
  begin
    info('FINISHED');
    UPDATE PROCEDURE_EXECUCAO SET RUNNING = 0 WHERE CD_ID = v_semaforo_id;
  end;
END;
/
CREATE OR REPLACE FUNCTION GET_LOGGER(v_proc_name VARCHAR2, v_proc_args VARCHAR2, v_source_name VARCHAR2 DEFAULT NULL, v_source_type VARCHAR2 DEFAULT 'PROCEDURE')
  RETURN LOGGER
IS
  v_semaforo_id NUMBER;
BEGIN
  MERGE INTO PROCEDURE_SEMAFORO USING DUAL ON (PROC_NAME = v_proc_name)
    WHEN NOT MATCHED THEN INSERT (PROC_NAME, MAX_CONCURRENT_INSTANCES, BLOCK_NEW_INSTANCES) VALUES (v_proc_name, 9999, 0);
  INSERT INTO PROCEDURE_EXECUCAO(PROC_NAME, ARGS, RUNNING, HAS_ERROS) VALUES (v_proc_name, v_proc_args, 1, 0) RETURNING CD_ID INTO v_semaforo_id;
  COMMIT;
  RETURN LOGGER(
    v_semaforo_id,
    NVL(v_source_name, v_proc_name),
    v_source_type,
    v_proc_name,
    v_proc_args
  );
END;
/
------------------------------------------------------------------------------------------------------------------------
------------------------------------TABELAS QUE ARMAZENAMM OS MAPAS PROCESSADOS-----------------------------------------
------------------------------------------------------------------------------------------------------------------------

CREATE TABLE MAPS
(
	MAP_ID NUMBER NOT NULL PRIMARY KEY,
	MAP_ATTRIBUTES CLOB CHECK (MAP_ATTRIBUTES IS JSON),
  DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP
)
/
CREATE SEQUENCE SEQ_MAPS_ID START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_MAPS
	BEFORE INSERT
	ON MAPS
	FOR EACH ROW
BEGIN
  IF :NEW.MAP_ID IS NULL THEN
    :NEW.MAP_ID := SEQ_MAPS_ID.nextval;
  END IF;
END;
/
CREATE OR REPLACE TRIGGER TRG_BU_MAPS
  BEFORE UPDATE ON MAPS
  FOR EACH ROW
BEGIN
  :NEW.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE TABLE TILES
(
	CD_ID NUMBER NOT NULL REFERENCES MAPS ON DELETE CASCADE,
	ZOOM_LEVEL NUMBER NOT NULL,
	TILE_COLUMN NUMBER NOT NULL,
	TILE_ROW NUMBER NOT NULL,
	TILE_DATA BLOB,
	DT_CREATED TIMESTAMP DEFAULT SYSTIMESTAMP,
  DT_UPDATED TIMESTAMP DEFAULT SYSTIMESTAMP,
	CONSTRAINT PK_TILES PRIMARY KEY (CD_ID, ZOOM_LEVEL, TILE_COLUMN, TILE_ROW)
)
/
CREATE OR REPLACE TRIGGER TRG_BU_TILES
  BEFORE UPDATE ON TILES
  FOR EACH ROW
BEGIN
  :NEW.DT_UPDATED := SYSTIMESTAMP;
END;
/
CREATE TABLE MAP_ATTRIBUTE (
  CD_ID NUMBER NOT NULL PRIMARY KEY
  , MAP_ID NUMBER REFERENCES MAPS(MAP_ID) ON DELETE CASCADE
  , NAME VARCHAR2(255)
  , TYPE VARCHAR2(255)
  , MIN NUMBER
  , MAX NUMBER
);
/
CREATE SEQUENCE SEQ_MAP_ATTRIBUTE_ID START WITH 1 INCREMENT BY 1;
/
CREATE TRIGGER TRG_BI_MAP_ATTRIBUTE
	BEFORE INSERT
	ON MAP_ATTRIBUTE
	FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_MAP_ATTRIBUTE_ID.nextval;
  END IF;
end;
/
CREATE TABLE MAP_ATTRIBUTE_UNIQ_VALUE (
  CD_ID NUMBER NOT NULL PRIMARY KEY
  , ATTRIBUTE_ID REFERENCES MAP_ATTRIBUTE(CD_ID) ON DELETE CASCADE
  , VALUE VARCHAR2(4000)
);
/
CREATE SEQUENCE SEQ_MAP_ATTRIBUTE_VALUE_ID START WITH 1 INCREMENT BY 1;
/
CREATE TRIGGER TRG_BI_MAP_ATTRIBUTE_VALUE
	BEFORE INSERT
	ON MAP_ATTRIBUTE_UNIQ_VALUE
	FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_MAP_ATTRIBUTE_VALUE_ID.nextval;
  END IF;
end;
/
------------------------------------------------------------------------------------------------------------------------
---------------------------------------------TABELAS DE LAYER DE OPERACAO-----------------------------------------------
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE LAYER_TYPE (
  CD_ID NUMBER NOT NULL PRIMARY KEY,
  LAYER_NAME VARCHAR2(255)
);
INSERT ALL
  INTO LAYER_TYPE VALUES (1, 'VELOCIDADE')
  INTO LAYER_TYPE VALUES (2, 'VELOCIDADE_VENTO')
  INTO LAYER_TYPE VALUES (3, 'RPM')
  INTO LAYER_TYPE VALUES (4, 'ESTADO')
  INTO LAYER_TYPE VALUES (5, 'EQUIPAMENTO')
  INTO LAYER_TYPE VALUES (7, 'SOBREPOSICAO')
  INTO LAYER_TYPE VALUES (8, 'AREA_TRABALHADA')
  INTO LAYER_TYPE VALUES (9, 'AREA_FALHA')
SELECT 1 FROM DUAL;
/
CREATE TABLE EVENTOS_OPERACAO_LAYERS (
  CD_ID NUMBER NOT NULL PRIMARY KEY,
  EVENT_ID NUMBER NOT NULL REFERENCES EVENTOS_OPERACAO_TALHAO(CD_ID) ON DELETE CASCADE,
  LAYER_TYPE NOT NULL REFERENCES LAYER_TYPE(CD_ID),
  MAP_ID NUMBER NOT NULL REFERENCES MAPS(MAP_ID) ON DELETE CASCADE,
  JSON_LAYER CLOB CHECK ( JSON_LAYER IS JSON )
);
/
CREATE SEQUENCE SEQ_EVENTOS_OPERACAO_LAYERS_ID START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRG_BI_EOL_ID
  BEFORE INSERT ON EVENTOS_OPERACAO_LAYERS
  FOR EACH ROW
BEGIN
  IF :NEW.CD_ID IS NULL THEN
    :NEW.CD_ID := SEQ_EVENTOS_OPERACAO_LAYERS_ID.nextval;
  END IF;
END;
/
CREATE OR REPLACE VIEW VW_PROCEDURE_EXECUCAO AS
select CD_ID, PROC_NAME, ARGS, RUNNING, HAS_ERROS, DT_CREATED, DT_UPDATED,
  TO_CHAR(TRUNC(SYSDATE) + NUMTODSINTERVAL(
      CASE RUNNING
        WHEN 1 THEN (TO_EPOCH(SYSDATE) - TO_EPOCH(DT_CREATED))
        ELSE (TO_EPOCH(DT_UPDATED) - TO_EPOCH(DT_CREATED))
      END, 'second')
    , 'hh24:mi:ss') AS EXECUTION_TIME
  from PROCEDURE_EXECUCAO
ORDER BY DT_CREATED DESC;